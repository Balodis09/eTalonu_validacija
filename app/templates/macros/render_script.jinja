{% macro render_chart_script(canvas_id, min_date, max_date) %}

<script src='{{ url_for("static", filename="js/chart.js") }}'></script>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store('chart', {
            url: '',

            setUrl(newUrl) {
                this.url = newUrl;
            },

            newChart() {
                createChart(this.url, '{{ canvas_id }}').then(() => {
                    Alpine.store('loading', false);
                    {# localStorage.clear(); #}
                });
            },

            updateChart() {
                updateCreatedChart(this.url).then(() => {
                    Alpine.store('loading', false);
                    {# localStorage.clear(); #}
                });
            }
        });
        Alpine.store('loading', true);
        Alpine.data('dateForm', function () {
            return {
                start_date: this.$persist('').using(sessionStorage),
                end_date: this.$persist('').using(sessionStorage),
                validateDates: function () {
                    if (this.$refs.start_date.validity.valueMissing) {
                        const message = 'Lūdzu norādi datumu.';
                        this.$refs.start_date.setCustomValidity(message);
                    }
                    else if (this.$refs.start_date.validity.rangeUnderflow ||
                        this.$refs.start_date.validity.rangeOverflow) {
                        const message = 'Datubāzē pieejami ieraksti no {{ min_date }} līdz {{ max_date }}.';
                        this.$refs.start_date.setCustomValidity(message);
                    }
                    else {
                        this.$refs.start_date.setCustomValidity('');
                    }

                    if (this.$refs.end_date.validity.valueMissing) {
                        const message = 'Lūdzu norādi datumu.';
                        this.$refs.end_date.setCustomValidity(message);
                    }
                    else if (this.$refs.end_date.validity.rangeUnderflow ||
                        this.$refs.end_date.validity.rangeOverflow) {
                        const message = 'Datubāzē pieejami ieraksti no {{ min_date }} līdz {{ max_date }}.';
                        this.$refs.end_date.setCustomValidity(message);
                    }
                    else {
                        this.$refs.end_date.setCustomValidity('');
                    }

                    if (this.start_date && this.end_date) {
                        const startDate = new Date(this.start_date);
                        const endDate = new Date(this.end_date);
                        if (endDate < startDate) {
                            const message = 'Beigu datums nedrīkst būt pirms sākuma datuma';
                            this.$refs.end_date.setCustomValidity(message);
                        }
                        else {
                            this.$refs.end_date.setCustomValidity('');
                        }
                    }
                }
            };
        });

    });
</script>

{% endmacro %}