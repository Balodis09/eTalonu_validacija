{% extends "base.jinja" %}

{% block title %}
<title>eTalonu validācijas - Braucieni stundā</title>
{% endblock title %}

{% block head %}
{{ super() }}
<script src="https://unpkg.com/chart.js@4.4.3/dist/chart.umd.js"
  integrity="sha512-LUpacDQOhzI4MVomIbJOUbdKypLvklsznjLrjD9GwzynjSlF7qLy112SzTw+ZWJPxhBvNRLGGdW/7E1slOvsFA=="
  crossorigin="anonymous" defer></script>
{% endblock head %}

{% block page_content %}
<div x-data="chart_data">
  <div>
    <label for="param1">Param1:</label>
    <input type="text" id="param1" x-model="param1">
  </div>
  <button id="test_button" type="submit" class="btn btn-primary" :disabled="loading" @click="fetchNewData">
    <template x-if="loading">
      <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
      <span class="visually-hidden">Loading...</span>
    </template>
    <template x-if="!loading">
      <span>Press Me</span>
    </template>
  </button>
  <div style="width: 75%; margin: auto;">
    <canvas id="myChart"></canvas>
  </div>
</div>
{% endblock page_content %}
{% block scripts %}
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('chart_data', () => ({
      loading: false,
      data: [],
      chart: null,
      param1: '',
      maxObservedCount: 0,

      async init() {
        const response = await fetch('{{ url_for('main.get_times') }}');
        this.data = await response.json();
        this.renderChart(this.data)
      },

      renderChart(chart_data) {
        const hours = chart_data.map(i => i[0]);
        const counts = chart_data.map(i => i[1]);
        const maxCount = Math.max(...counts);
        if (maxCount > this.maxObservedCount) {
          this.maxObservedCount = maxCount;
        }
        const ctx = document.getElementById('myChart').getContext('2d');

        if (this.chart) {
          this.chart.destroy();
        }

        this.chart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: hours,
            datasets: [{
              label: 'Count of Validacijas',
              data: counts,
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                max: this.maxObservedCount + 10
              }
            }
          }
        });
      },

      async fetchNewData() {
        this.loading = true;
        const params = new URLSearchParams({ param1: this.param1 });
        const response = await fetch('{{ url_for('main.get_times') }}'.concat("?", params));
        this.data = await response.json();
        this.renderChart(this.data);
        this.loading = false;
      },

    }));
  });
</script>
{% endblock scripts %}